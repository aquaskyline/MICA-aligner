#############################################################################
# Configuration file for MICA
#############################################################################

[Database]
SaValueFileName=.sa8;
CPUSaValueFileName=.sa;


[Memory]
# Define the working memory limitation of CPU main memory
printf("deep dp count: %d\n", deepDPCount) -1 means unlimited. Exceeding of this limitation will not

# stop the program from running but a warning message will
# be displayed.
MemoryCPUMaxUsageMBytes=-1;

# Define the working memory limitation of MIC main memory
# -1 means unlimited. Exceeding of this limitation will not
# stop the program from running but a warning message will
# be displayed.
MemoryMICMaxUsageMBytes=3600;

[BAMSpecific]
# Number of CPU threads used for compression of the BAM file.
# This option is only meaningful if using BAM format output.
NumOfCompressionThreads = 6;

[MultipleThreading]
# Number of CPU threads to be used by the MICA
NumOfCPUThreads = 0;
# Not supported currently

# Number of MIC threads to be used by the MICA
# Profile 1 - Main Development Profile up to R140
# NumOfMICThreads   = 0;
# NumOfMICThreads_1 = 0;
# NumOfMICThreads_2 = 240;
# Profile 2 - Main Development Profile from R140
NumOfMICThreads   = 224;
NumOfMICThreads_1 = 0;
NumOfMICThreads_2 = 0;
# Profile 3 - CPU Development Profile
# NumOfMICThreads   = 0;
# NumOfMICThreads_1 = 0;
# NumOfMICThreads_2 = 0;
# Profile 4 - Main Development Profile from R140
# NumOfMICThreads   = 224;
# NumOfMICThreads_1 = 224;
# NumOfMICThreads_2 = 224;
# The number of OMP thread defined on mica scripts
# should matches with the ini configuration here.
# Otherwise program will output
# OMP: Warning #123: Ignoring invalid OS proc ID 225.

[AlignmentModel]
# AlignmentModel controls the behavior of the BWT alignment model.
# It mainly controls the following:
# - Check and extent - more in 16G; less in 8G
# - HighOcc Pattern Cache - only in 8G
AlignmentModel = 16G;

# InvalidReadHandling controls how 2BWT aligner handles read with invalid character(s).
# 2BWT aligner only support aligning reads containing only characters A, C, G or T.
# The rest of the characters are considered invalid.
# If InvalidReadHandling is set to SKIP then these reads will be discarded.
# If InvalidReadHandling is set to REPLACE then these invalid characters will be replaced by G.
InvalidReadHandling = REPLACE;

[PairEnd]
# StrandArrangement defines the strand of left and right legs of
# each pair-end alignment. Valid values are:
# +/-, -/-, +/+ or -/+.
# For example, if it is +/- then left leg of each reported pair-end alignment
# must be a positive strand occurrence while the right being a negative strand occurrence.
StrandArrangement=+/-;
# Not supported currently

# Maximum number of alignment output for each single-end read
# This will only affect all-valid alignment and all-best alignments.
MaxNumOfAlignment = 1000;

[PairEndSGAEnhancement]
# SGA Common Parameters
-----------------------------------------
# SGAScoreTF (SGA Score Threshold Factor) governs the 
# minimum SGA score for Recovery to be considered a valid alignment. 
SGAScoreTF = 0.30;
#
# SGAScore* (SGA Scoring) defines the different score/penalty of
# each matching operations.
SGAScoreMatch = 1;
SGAScoreMismatch = -2;
SGAScoreGapOpen = -3;
SGAScoreGapExtend = -1;
# Not advisable to update the above value as the following features do not
# support dynamic score matrix that would cause unexpected behavior.
# - MIC-DP
# - MAPQ Computation
#
# SGASoft*ClipLength defines the length that the SGA is allowed to clip
# at the 5' end of the read
SGASoftHeadClipLength = 0.40;
#
# and at the 3' end of the read
SGASoftTailClipLength = 0.40;
#
# and the total of above must not exceed this boundary
SGASoftTotalClipLength = 0.80;

# SGA Orphan Recovery
# -----------------------------------------
# This enhancement attempts to increase the number of aligned pair-end read by
# employing semi-global alignment on half-aligned pair-end read. Only half-aligned read
# with occurrences less than (X) will trigger than enhancement. 
#
#   (X) is calculated by this formula:
#       (X) = ReadLength * SGAOrphanTriggerTF
#
# Algorithm: Let A and B be a pair-end read. When A is aligned while B is not, 
# and SGA Orphan Recovery is enabled, B will be passed into the SGA engine. 
# SGA engine will work out the approximate location of B by the user specified 
# insertion size and the alignment of A and perform a SGA on that 
# approximate location. This process is called "Recovery".
#
# To enable the above enhancement, set SGAOrphanEnhancement to TRUE.
# SGAOrphanTriggerTF (SGA Orphan Trigger Threshold Factor) is an 
# advance option which should be left unchanged if unsure.
SGAOrphanEnhancement = TRUE;
SGAOrphanTriggerTF = 0.30;



# SGA Orphan Recovery - Extended
# -----------------------------------------
# This enhancement based on the idea similar to the SGA Orphan Recovery.
# The difference is that both-aligned pair-end read, each leg with occurrences less than (Y)
# will also trigger this enhancement. The extended recovery will perform Recovery on
# any potential leg basing on aligned READ; then aligned MATE. 
#
#   (Y) is calculated by this formula:
#       (Y) = ReadLength * SGAOrphanExtendTriggerTF
#
#
# To enable the above enhancement, set SGAOrphanExtendEnhancement to TRUE.
# SGAOrphanExtendTriggerTF (SGA Orphan Trigger Threshold Factor) is an 
# advance option which should be left unchanged if unsure.
SGAOrphanExtendEnhancement = TRUE;
SGAOrphanExtendTriggerTF = 1.50;


# SGA Seed Recovery
# -----------------------------------------
# This enhancement attempts to increase the number of aligned pair-end read by
# employing semi-global alignment on none-aligned pair-end read.
SGASeedEnhancement = TRUE;

# SGASeedLength and SGASeedLengthOverlap defines the percentage of the length of each read ( when value <= 1 ) 
# or the absolute length independent of each read ( when value > 1)
# will be extracted as seed. Extracted seeds are allowed to be overlapped, and the allowed overlapped
# is defined as percentage by SGASeedLengthOverlap ( when SGASeedLengthOverlap <= 1) or absolute length ( when SGASeedLengthOverlap > 1 ).
# The calculated length and overLap length of seed will be round to the nearest integer
# e.g. if SGASeedLength = 0.276, SGASeedLengthOverlap = 0.204, and length of read is 100, 
# then extracted seed length will be 28 and overlap length will be 20
# e.g. if SGASeedLength = 27.6 and SGASeedLengthOverlap = 20.4, 
# then extracted seed length will be 28 and overlap length will be 20 independent of length of read
SGASeedLength = 0.20;
SGASeedLengthOverlap = 0.0;

# Set this parameter to a negative number to align seed with a looser criteria relatives to the input number of mismatch/error.
# Set this parameter to a positive number to specify the exact criteria to align seed.
# 2BWT is shipped with alignment model up to 5 mismatches/indels. Default valid value = -5 to 5.
# e.g. If 2bwt is called with -m 2, and this value is set to -1.
# then the seed will be aligned with a -m 1 aligner.
# e.g. If 2bwt is called with -m 5, and this value is set to 2.
# then the seed will be aligned with a -m 2 aligner.
SGASeedLooseCriteria = 1;

# Set this parameter to limit the number of seed alignment.
# e.g If the total number of alignments returned by either the seeds in read/mate exceeds the number below,
# SeedEnhancement will be skipped.
SGASeedOccLimitation = 100;


# SGA Seed Recovery (Second-Level)
# -----------------------------------------
# Second level of SGA Seed Recovery functionality
# All below controls the level-2 SRA Seed Recovery
# If enabled, any SRA Seed Recovery invocation that results in failure
# due to breaching of SGASeedOccLimitation criteria will be re-run
# with SRA Seed Settings below.
SGASeedEnhancement_1 = TRUE;
SGASeedLength_1 = 0.34;
SGASeedLengthOverlap_1 = 0.0;
SGASeedOccLimitation_1 = 1000;

# Not supported
SGASeedLooseCriteria_1 = 1;
# Not supported

## EOF
