#############################################################################
# Configuration file for 2BWT-Aligner
#############################################################################

############################################
# Shared parameters by 
# Local Alignment and Short Read Alignment
############################################
[Database]
Location=./;                    # Location of Pre-processed database

AnnotationFileName=*.ann;
PackedDNAFileName=*.pac;

BWTCodeFileName=*.bwt;
BWTOccValueFileName=*.fmv;
LookupTableFileName=*.lkt;

RevPackedDNAFileName=*.rev.pac;
RevBWTCodeFileName=*.rev.bwt;
RevBWTOccValueFileName=*.rev.fmv;
RevLookupTableFileName=*.rev.lkt;

SaValueFileName=*.sa8;

HighOccPatternFileName=*.ht;
HighOccFileName=*.hocc;
HighOccPackedFileName=*.hpac;
HighOccAuxValueFileName=*.hv;

OutputFileName=*.out;


############################################
# Parameters for Local Alignment
############################################

[PerformanceStatistics]
PrintProgress=N;		# Prompt completion of each query in a file
PrintProgressDepth=0;           # 1 to 4 for progress within query
                                # Prompt 4^PrintProgressDepth times per strand
PrintHistogram=N;               # Display result summary by E-value
HistogramMinEvalue=1e-24;       # Minimum E-value of the histogram
PrintPerformanceStatistics=N;   # Display time spent on each stage of algorithm
PrintDPStatistics=N;            # Display dynamic programming statistics


[Memory]
WorkingMemorySize=268435456;    # Normal memory profile
AlignmentMemorySize=4194304;    # Normal memory profile


############################################
# Parameters for Short Read Alignment
############################################

[AlignmentModel]
# AlignmentModel controls the behavior of the BWT alignment model.
# It mainly controls the following:
# - Check and extent - more in 16G; less in 8G
# - HighOcc Pattern Cache - only in 8G
AlignmentModel = 16G;

# Supply the percentage of read to trim. Valid value = 0 to 99.
# e.g. If the read length was 100 and this parameter is set to 10
# then the read will be trimmed to 90bp before begin passed into the aligner.
# Set it to 0 to disable pre-trimming of read.
TrimPrealignRead = 0;

# Supply the percentage of read to trim. Valid value = 0 to 99.
# e.g. If the unaligned read length was 100 and this parameter is set to 20
# then the unaligned read will be trimmed to 80bp before begin passed into the aligner again.
# Set it to 0 to disable 2nd pass of unaligned read.
TrimUnalignRead = 0;

# Override the parameter to align unaligned read. Relative to the input maximum number of errors.
# 2BWT is shipped with alignment model up to 5 mismatches/indels. Default valid value = -5 to 5.
# e.g. If 2bwt is called with -m 2, and this value is set to -1.
# then the trimmed unaligned read will be passed into a -m 1 aligner.
# e.g. If 2bwt is called with -g 2, and this value is set to -1.
# then the trimmed unaligned read will be passed into a -g 1 aligner.
# Set it to 0 to disable overriding.
LooseCriteriaUnalignRead = 0;

# Override the parameter to align unaligned read. Valid value = TRUE/FALSE.
# e.g. If 2bwt is called with -m x, and this value is set to TRUE.
# then the trimmed unaligned read will be passed into a -g x aligner.
# Set it to FALSE to disable overriding.
ForceIndelUnalignedRead = FALSE;

# InvalidReadHandling controls how 2BWT aligner handles read with invalid character(s).
# 2BWT aligner only support aligning reads containing only characters A, C, G or T.
# The rest of the characters are considered invalid.
# If InvalidReadHandling is set to SKIP then these reads will be discarded.
# If InvalidReadHandling is set to REPLACE then these invalid characters will be replaced by G.
InvalidReadHandling = REPLACE;

[SingleEnd]
# Maximum number of alignment output for each single-end read
# This will only affect all-valid alignment and all-best alignments.
MaxNumOfAlignment = -1;

[SingleEndSGAEnhancement]
# SGA Common Parameters
-----------------------------------------
# SGAScoreTF (SGA Score Threshold Factor) governs the 
# minimum SGA score for Recovery to be considered a valid alignment. 
SGAScoreTF = 0.30;
#
# SGAScore* (SGA Scoring) defines the different score/penalty of
# each matching operations.
SGAScoreMatch = 1;
SGAScoreMismatch = -2;
SGAScoreGapOpen = -3;
SGAScoreGapExtend = -1;

# SGA Seed Recovery
# -----------------------------------------
# This enhancement attempts to increase the number of aligned pair-end read by
# employing semi-global alignment on none-aligned pair-end read.
SGASeedEnhancement = FALSE; 

# SGASeedLength and SGASeedLengthOverlap defines the percentage of the length of each read
# will be extracted as seed. Extracted seeds are allowed to be overlapped, and the allowed overlapped
# is defined as percentage by SGASeedLengthOverlap.
SGASeedLength = 0.30;
SGASeedLengthOverlap = 0.10;

# Set this parameter to a negative number to align seed with a looser criteria relatives to the input number of mismatch/error.
# Set this parameter to a positive number to specify the exact criteria to align seed.
# 2BWT is shipped with alignment model up to 5 mismatches/indels. Default valid value = -5 to 5.
# e.g. If 2bwt is called with -m 2, and this value is set to -1.
# then the seed will be aligned with a -m 1 aligner.
# e.g. If 2bwt is called with -m 5, and this value is set to 2.
# then the seed will be aligned with a -m 2 aligner.
SGASeedLooseCriteria = -1;

# Set this parameter to limit the number of seed alignment.
# e.g If the total number of alignments returned by either the seeds in read/mate exceeds the number below,
# SeedEnhancement will be skipped.
SGASeedOccLimitation = 100;

[PairEnd]
# StrandArrangement defines the strand of left and right legs of
# each pair-end alignment. Valid values are:
# +/-, -/-, +/+ or -/+.
# For example, if it is +/- then left leg of each reported pair-end alignment
# must be a positive strand occurrence while the right being a negative strand occurrence.
StrandArrangement=+/-

[PairEndSGAEnhancement]
# SGA Common Parameters
-----------------------------------------
# SGAScoreTF (SGA Score Threshold Factor) governs the 
# minimum SGA score for Recovery to be considered a valid alignment. 
SGAScoreTF = 0.30;
#
# SGAScore* (SGA Scoring) defines the different score/penalty of
# each matching operations.
SGAScoreMatch = 1;
SGAScoreMismatch = -2;
SGAScoreGapOpen = -3;
SGAScoreGapExtend = -1;


# SGA Orphan Recovery
# -----------------------------------------
# This enhancement attempts to increase the number of aligned pair-end read by
# employing semi-global alignment on half-aligned pair-end read. Only half-aligned read
# with occurrences less than (X) will trigger than enhancement. 
#
#   (X) is calculated by this formula:
#       (X) = ReadLength * SGAOrphanTriggerTF
#
# Algorithm: Let A and B be a pair-end read. When A is aligned while B is not, 
# and SGA Orphan Recovery is enabled, B will be passed into the SGA engine. 
# SGA engine will work out the approximate location of B by the user specified 
# insertion size and the alignment of A and perform a SGA on that 
# approximate location. This process is called "Recovery".
#
# To enable the above enhancement, set SGAOrphanEnhancement to TRUE.
# SGAOrphanTriggerTF (SGA Orphan Trigger Threshold Factor) is an 
# advance option which should be left unchanged if unsure.
SGAOrphanEnhancement = FALSE;
SGAOrphanTriggerTF = 0.30;

# SGA Orphan Recovery - Extended
# -----------------------------------------
# This enhancement based on the idea similar to the SGA Orphan Recovery.
# The difference is that both-aligned pair-end read, each leg with occurrences less than (Y)
# will also trigger this enhancement. The extended recovery will perform Recovery on
# any potential leg basing on aligned READ; then aligned MATE. 
#
#   (Y) is calculated by this formula:
#       (Y) = ReadLength * SGAOrphanExtendTriggerTF
#
#
# To enable the above enhancement, set SGAOrphanExtendEnhancement to TRUE.
# SGAOrphanExtendTriggerTF (SGA Orphan Trigger Threshold Factor) is an 
# advance option which should be left unchanged if unsure.
SGAOrphanExtendEnhancement = FALSE;
SGAOrphanExtendTriggerTF = 0.30;

# SGA Seed Recovery
# -----------------------------------------
# This enhancement attempts to increase the number of aligned pair-end read by
# employing semi-global alignment on none-aligned pair-end read.
SGASeedEnhancement = FALSE;

# SGASeedLength and SGASeedLengthOverlap defines the percentage of the length of each read
# will be extracted as seed. Extracted seeds are allowed to be overlapped, and the allowed overlapped
# is defined as percentage by SGASeedLengthOverlap.
SGASeedLength = 0.30;
SGASeedLengthOverlap = 0.15;

# Set this parameter to a negative number to align seed with a looser criteria relatives to the input number of mismatch/error.
# Set this parameter to a positive number to specify the exact criteria to align seed.
# 2BWT is shipped with alignment model up to 5 mismatches/indels. Default valid value = -5 to 5.
# e.g. If 2bwt is called with -m 2, and this value is set to -1.
# then the seed will be aligned with a -m 1 aligner.
# e.g. If 2bwt is called with -m 5, and this value is set to 2.
# then the seed will be aligned with a -m 2 aligner.
SGASeedLooseCriteria = 1;

# Set this parameter to limit the number of seed alignment.
# e.g If the total number of alignments returned by either the seeds in read/mate exceeds the number below,
# SeedEnhancement will be skipped.
SGASeedOccLimitation = 4096;

## EOF
