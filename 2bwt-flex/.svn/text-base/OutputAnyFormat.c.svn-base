//
//    OutputAnyFormat.c
//
//    SOAP2 / 2BWT
//
//    Copyright (C) 2012, HKU
//
//    This program is free software; you can redistribute it and/or
//    modify it under the terms of the GNU General Public License
//    as published by the Free Software Foundation; either version 2
//    of the License, or (at your option) any later version.
//
//    This program is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//    GNU General Public License for more details.
//
//    You should have received a copy of the GNU General Public License
//    along with this program; if not, write to the Free Software
//    Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
//
///////////////////////////////////////////////////////////////////////////////////////////////
/* 
    SRAOutput defines the function to parses the 
    output file generated by SOAP2 aligner.
    
    Date   : 3rh July 2011
    Author : Edward MK Wu
    Change : New file.

*/


//Define the debug flag to turn on extra output.
//#define DEBUG_OUTPUT_BINARY_PRINT_MESSAGE

#include "OutputAnyFormat.h"

void SRAOutputFree(SRAOutputFileInfo * sraOutputFileInfo) {
    fclose(sraOutputFileInfo->outputFile);
    free(sraOutputFileInfo->dbLengthOfSeqs);
    free(sraOutputFileInfo->dbAnnotation);
    free(sraOutputFileInfo->dumpFileNames);
    free(sraOutputFileInfo);
}

SRAOutputFileInfo * SRAOutputOpen(const char * fileName) {
    unsigned int i,j;
    size_t lineBufferSize = OCC_OUTPUT_MAX_LINE_LENGTH;
    char * lineBuffer = (char*) malloc(sizeof(char) * lineBufferSize);
    unsigned int charInLine;
    unsigned int dbNumOfSeqs;
    unsigned int outputFormat;
    unsigned int dumpNumOfFiles;
    char * dumpFileNames, * dumpFilenamesPtr;
    unsigned int queryMode, queryBatch;

    SRAOutputFileInfo * sraOutputFileInfo = (SRAOutputFileInfo*) malloc(sizeof(SRAOutputFileInfo));

    fprintf(stderr, "[SRAOutputOpen] Opening %s ..",fileName);
    FILE * outFilePtr = (FILE*)fopen64(fileName,"r");
    if (outFilePtr==NULL || outFilePtr ==0) {
        fprintf(stderr, "Failed!\n");
        free(sraOutputFileInfo);
        exit(1);
    } else {
        fprintf(stderr, "Done!\n");
    }
    
    //Ignore the header lines
    for (i=0;i<OCC_OUTPUT_NUM_HEADER_LINE;i++) {
        charInLine = getline(&lineBuffer, &lineBufferSize, outFilePtr);
    }
    
    fscanf(outFilePtr,"%u\n",&outputFormat);
    #ifdef DEBUG_OUTPUT_BINARY_PRINT_MESSAGE
        printf("outputFormat=%u\n",outputFormat);
    #endif
    
    fscanf(outFilePtr,"%u\n",&dbNumOfSeqs);
    #ifdef DEBUG_OUTPUT_BINARY_PRINT_MESSAGE
        printf("dbNumOfSeqs=%u\n",dbNumOfSeqs);
    #endif
    
    unsigned int * dbLengthOfSeqs = (unsigned int*) malloc(sizeof(unsigned int)*dbNumOfSeqs);
    Annotation * dbAnnotation = (Annotation*) malloc(sizeof(Annotation)*dbNumOfSeqs);
    for (i=0;i<dbNumOfSeqs;i++) {
        fscanf(outFilePtr,"%u %u %s\n",&(dbAnnotation[i].gi),&(dbLengthOfSeqs[i]),(char*)&(dbAnnotation[i].text));
        #ifdef DEBUG_OUTPUT_BINARY_PRINT_MESSAGE
            printf("%u %u %s\n",dbAnnotation[i].gi,dbLengthOfSeqs[i],dbAnnotation[i].text);
        #endif
    }
    
    fscanf(outFilePtr,"%u\n",&queryBatch);
    #ifdef DEBUG_OUTPUT_BINARY_PRINT_MESSAGE
        printf("queryBatch=%u\n",queryBatch);
    #endif
    
    fscanf(outFilePtr,"%u\n",&queryMode);
    #ifdef DEBUG_OUTPUT_BINARY_PRINT_MESSAGE
        printf("queryMode=%u\n",queryMode);
    #endif
    
    fscanf(outFilePtr,"%u\n",&dumpNumOfFiles);
    #ifdef DEBUG_OUTPUT_BINARY_PRINT_MESSAGE
        printf("dumpNumOfFiles=%u\n",dumpNumOfFiles);
    #endif
    dumpFileNames = (char*) malloc(sizeof(char)*dumpNumOfFiles*(OCC_OUTPUT_MAX_LINE_LENGTH+1));
    dumpFilenamesPtr = dumpFileNames;
    for (i=0;i<dumpNumOfFiles;i++) {
        fscanf(outFilePtr,"%s\n",dumpFilenamesPtr);
        #ifdef DEBUG_OUTPUT_BINARY_PRINT_MESSAGE
            printf("%s\n",dumpFilenamesPtr);
        #endif
        dumpFilenamesPtr+=(OCC_OUTPUT_MAX_LINE_LENGTH+1);
    }
    
    sraOutputFileInfo->outputFile = outFilePtr;
    sraOutputFileInfo->outputFormat = outputFormat;
    sraOutputFileInfo->queryMode = queryMode;
    sraOutputFileInfo->queryBatch = queryBatch;
    
    sraOutputFileInfo->dbNumOfSeqs = dbNumOfSeqs;
    sraOutputFileInfo->dbLengthOfSeqs = dbLengthOfSeqs;
    sraOutputFileInfo->dbAnnotation = dbAnnotation;
    
    sraOutputFileInfo->dumpNumOfFiles = dumpNumOfFiles;
    sraOutputFileInfo->dumpFileNames = dumpFileNames;
    
    free(lineBuffer);
    
    return sraOutputFileInfo;
}

